'''
Scratchpad
'''

import discord
from discord.ext import commands
from discord.utils import get
import re

DEBUG = 0

with open('token.tok') as f:
	token = f.read()

# Dict of dicts. Top level is guild ID as key, dict of info as value
servers = {
	1133909806802030733: {
		"guildName": "Reginald's Redemptionists",
		"inviteTrackingChannelId": 1133909807653462027
	},
	675899094740500496: {
		"guildName": "The Reckoner Zone",
		"inviteTrackingChannelId": 675899094740500507
	},
	1241134342890061924: {
		"guildName": "Talking to myself",
		"inviteTrackingChannelId": 1241134343343312918
	}
}

bot = commands.Bot(command_prefix='+', intents=discord.Intents.all())

invites = {}
guildEmojis = {}

def find_invite_by_code(invite_list, code):
	for i in invite_list:
		if i.code ==  code:
			return i
@bot.event
async def on_ready():
	# get list of guilds this bot is a member of
	for g in bot.guilds:
		# get a list of all invites to be checked by on_member_join()
		invites[g.id] = await g.invites()

		# get a list of all emojis to be checked by on_message()
		guildEmojis[g.id] = {}
		for e in g.emojis:
			guildEmojis[g.id][e.name] = e.id

	if DEBUG: print(invites)
	if DEBUG: print(guildEmojis)

@bot.event
async def on_member_join(member):
	# for this event I am calling the current invites[] values "previous" since they are now outdated
	if DEBUG: print(f"DEBUG: invites\n{invites}\n")
	if DEBUG: print(f"DEBUG: member\n{member}\n")

	# grab the previous invite counts that were created during on_ready()
	invites_before_join = invites[member.guild.id]
	if DEBUG: print(f"DEBUG: invites_before_join\n{invites_before_join}\n")

	# get the new invite counts from the server that this member just joined
	invites_after_join = await member.guild.invites()
	if DEBUG: print(f"DEBUG: invites_after_join\n{invites_after_join}\n")

	# for each of previous invites
	for ibj in invites_before_join:
		# if the previous count of this invite is not equal to the new invite count
		if ibj.uses != find_invite_by_code(invites_after_join, ibj.code).uses:
			if DEBUG: print(f"DEBUG: find_invite_by_code(invites_after_join, ibj.code).uses\n{find_invite_by_code(invites_after_join, ibj.code).uses}\n")
			print(f"{member.name} joined guild {member.guild.id} using invite code {ibj.code} generated by {ibj.inviter}")

			# update invite counts to what the are now
			invites[member.guild.id] = invites_after_join

			inviteTrackingChannel = bot.get_channel(servers[member.guild.id]["inviteTrackingChannelId"])
			await inviteTrackingChannel.send(f"`{member.name}` joined `{servers[member.guild.id]['guildName']}` using invite link `{ibj.code}` generated by `{ibj.inviter}`")

			return

@bot.event
async def on_member_remove(member):
	leaveTrackingChannel = bot.get_channel(servers[member.guild.id]["inviteTrackingChannelId"])
	await leaveTrackingChannel.send(f"`{member.name}` has left `{member.guild.name}`")

@bot.event
async def on_message(message):
	if message.content.count("bug") > 0:
		await message.add_reaction("🐜")
		# await message.channel.send("▲►▼▼▼")
	elif message.content.count("bot") > 0:
		await message.add_reaction("🤖")
		# await message.channel.send("▼◀▼▲▲►")
	elif message.content.count("?") > 0:
		await message.channel.send("yup")
	elif message.content.count("!") > 0:
		await message.add_reaction(message.guild.get_emoji(guildEmojis[message.guild.id]["suspicious"]))
	elif message.content.count("stfu Botslices") > 0:
		await message.channel.send("~~,' , |,'_'~~")

	await bot.process_commands(message)

@bot.command()
async def ping(ctx):
	await ctx.message.add_reaction("🏓")

@bot.command()
async def good(ctx, activity):
	match activity:
		case "gambit":
			response = "gambit sucks"
		case "strikes":
			response = "strikes are boring"
		case _:
			response = "shut up man"
	await ctx.send(response)

@bot.command()
async def whoami(ctx):
	await ctx.send("you are " + ctx.author.name)

bot.run(token)
